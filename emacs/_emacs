(setenv "HOME" "G:/")
(setenv "PATH" "G:/")

(setq default-directory "G:/")
(add-to-list 'load-path "G:/emacs-23.2/site-lisp")

;;color-scheme
(require 'color-theme)
(color-theme-initialize)
(color-theme-clarity)

;;yasnippet

(require 'yasnippet)
(yas/initialize)
(yas/load-directory "G:/emacs-23.2/site-lisp/yasnippet/snippets")

;;cedet
(require 'cedet)
(global-ede-mode t)
;(semantic-load-enable-code-helpers)
;(semantic-load-enable-semantic-debugging-helpers)
(setq semantic-default-submodes '(global-semantic-idle-scheduler-mode
				  global-semanticdb-minor-mode
				  global-semantic-idle-summary-mode
				  global-semantic-mru-bookmark-mode))

(semantic-mode 1)

(defconst cedet-user-include-dirs
  (list ".." "../include" "../inc" "../common" "../public"
	"../.." "../../include" "../..inc" "../../common" "../../public"))

(defconst cedet-win32-include-dirs
   (list "D:/Program Files/Microsoft Visual Studio 10.0/VC/include"))

(require 'semantic-c nil 'noerror)
(let ((include-dirs cedet-user-include-dirs))
  (when (eq system-type 'windows-nt)
    (setq include-dirs (append include-dirs cedet-win32-include-dirs)))
  (mapc(lambda (dir)
	 (semantic-add-system-include dir 'c++-mode)
	 (semantic-add-system-include dir 'c-mode))
	 include-dirs))

;meta-up & down from textmate

 (global-set-key [(meta up)] 'move-line-up)
(global-set-key [(meta down)] 'move-line-down) 
(defun move-line (&optional n)
 "Move current line N (1) lines up/down leaving point in place."
 (interactive "p")
 (when (null n)
    (setq n 1))
 (let ((col (current-column)))
    (beginning-of-line)
    (next-line 1)
    (transpose-lines n)
    (previous-line 1)
    (forward-char col)))
(defun move-line-up (n)
 "Moves current line N (1) lines up leaving point in place."
 (interactive "p")
 (move-line (if (null n) -1 (- n)))) 
(defun move-line-down (n)
 "Moves current line N (1) lines down leaving point in place."
 (interactive "p")
 (move-line (if (null n) 1 n)))

;vi-open-next-line
(global-set-key [(control o)] 'vi-open-next-line)
(defun vi-open-next-line (arg)
 "Move to the next line (like vi) and then opens a line."
 (interactive "p")
 (end-of-line)
 (open-line arg)
 (next-line 1)
 (indent-according-to-mode))

;parent-match
(global-set-key "%" 'match-paren)
(defun match-paren (arg)
 "Go to the matching parenthesis if on parenthesis otherwise insert %."
 (interactive "p")
 (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))